import React from 'react';
import ReactDOM from "react-dom";
import './recipe_create.css'

class RecipeCreate extends React.Component {
  constructor(props) {
    super(props)
    this.state = {
      name: "",
      servings: "",
      ingredients: [], //double check item
      instructions: "", //double check item
      counter: 0
    }

    this.handleSubmit = this.handleSubmit.bind(this);
    this.tempAdd = this.tempAdd.bind(this);
  }

  handleSubmit(e) {
    e.preventDefault();
    // this.props.generateRecipe(); //////////
    console.log("BEEP BEEP")
  }

  update(field) {
    return (e) => {
      if (field === "first") {
        this.setState({ingredients: e.currentTarget.value })
      } else if (field === "ingredients") {
        let foods = this.state.ingredients;
        foods.push(e.currentTarget.value)
        console.log(foods)
        this.setState({ingredients: foods})
      } else {
        this.setState({ [field]: e.currentTarget.value })
      }
    }
  }

  handleAdd(){
    console.log("handle add")
    const button = document.getElementById("add-more-button");
    button.addEventListener('click', this.tempAdd)
  }

  tempAdd(){
    console.log("tempAdding")
    const newIng = document.createElement("INPUT");
    newIng.setAttribute("type", "text");
    newIng.onkeyup = this.newInput();
    newIng.onchange = this.update("ingredients");
    document
      .getElementsByClassName("ingredient-inputs")[0]
      .appendChild(newIng);
    newIng.focus()
  }

  newInput(){
    console.log("newinput")
    return (e) => {
      if(e.keyCode === 13) {
        const newIng = document.createElement("INPUT");
        newIng.setAttribute("type", "text");
        newIng.setAttribute("class", "ing-inputs")
        newIng.onkeyup = this.newInput();
        newIng.onchange = this.update("ingredients");
        document
          .getElementsByClassName("ingredient-inputs")[0]
          .appendChild(newIng);
        newIng.focus()
      }
    }
  }


  render() {
    return (
      <div className="recipe-create-div">
        <div className="recipe-create-wrapper">
          <h1>Build Your Dish!</h1>
          {/* Name, servings, ingredients, instructions */}
          <form className="recipe-create-form">
            <div>
              <label htmlFor="recipe-title">Recipe Name:</label>
              <input
                type="text"
                id="recipe-title"
                onChange={this.update("name")}
              />
              <br />

              <div className="ingredient-inputs">
                <label htmlFor="recipe-ingredients">Ingredients:</label>
                <input
                  type="text"
                  placeholder="a dash of salt"
                  onChange={this.update("ingredients")}
                  onKeyUp={this.newInput()}
                />
              </div>
              <button>Add More</button>
              <br />

              <label htmlFor="recipe-servings">Serving Size:</label>
              <input
                type="text"
                id="recipe-servings"
                onChange={this.update("servings")}
              />

              <label htmlFor="recipe-directions">Directions:</label>
              <textarea id="recipe-directions" cols="30" rows="10"></textarea>

              <input type="submit" onClick={this.handleSubmit}>
                Chef
              </input>
            </div>
          </form>
        </div>
      </div>
    );
  }



}

export default RecipeCreate;











<div className="recipe-create-div">
      //   <div className="recipe-create-wrapper">
      //     <h1>Build Your Dish!</h1>
      //     <form className="recipe-create-form">
      //       <div>
      //         <label htmlFor="recipe-title">Recipe Name:</label>
      //         <input
      //           type="text"
      //           id="recipe-title"
      //           onChange={this.update("name")}/>
      //         <br/>

      //         <div className="ingredient-inputs">
      //           <label htmlFor="recipe-ingredients">Ingredients:</label>
      //           <input
      //             type="text"
      //             placeholder="a dash of salt"
      //             onChange={this.update("ingredients")}
      //             onKeyUp={this.newInput()}
      //           />
      //         </div>
      //         {/* <button onClick={this.handleAdd}>Add More</button> */}
      //         <input type="button" value="Add More" onClick={this.handleAdd}/>
      //         <br/>

      //         <label htmlFor="recipe-servings">Serving Size:</label>
      //         <input
      //           type="text"
      //           id="recipe-servings"
      //           onChange={this.update("servings")}
      //         />

      //         <label htmlFor="recipe-directions">Directions:</label>
      //         <textarea id="recipe-directions" cols="30" rows="10"/>

      //         <input type="submit" onClick={this.handleSubmit} value="Chef" />
      //       </div>
      //     </form>
      //   </div>
      // </div>







      handleSubmit(e) {
    e.preventDefault();
    console.log("form hit submit") //this.props.makeRecipe()
  }

  update(field) {
    return (e) => {
      this.setState({ [field]: e.currentTarget.value })
    }
  }

  handleAdd(){
    console.log("handleAdding")
    const newIng = document.createElement("INPUT");
    newIng.setAttribute("type", "text");
    newIng.className = "ingredient-classname"
    newIng.onchange = this.update("ingredients");
    document
      .getElementsByClassName("ingredient-inputs")[0]
      .appendChild(newIng);
    newIng.focus()
  }

  newInput(){
    console.log("newinput")
    return (e) => {
      if(e.keyCode === 13 && e.currentTarget.className === 'ingredient-classname') {
        console.log("newinput hit enter")
        this.handleAdd()
      }
    }
  }